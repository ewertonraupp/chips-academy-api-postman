{
	"info": {
		"_postman_id": "39534f4a-537f-4629-a4d1-4dbd7e81afe7",
		"name": "Academy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31673057"
	},
	"item": [
		{
			"name": "01_Auth",
			"item": [
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.globals.set(\"tokenAdmin\", pm.response.text().token);\r",
									"\r",
									"pm.environment.set(\"tokenAdmin\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check is token exist\", function(){\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"})\r",
									"\r",
									"/*pm.test(\"Check is token exist\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).token).to.exist;\r",
									"})*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/login/",
							"host": [
								"{{Url}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar token login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validação True\", function(){\r",
									"    pm.expect(pm.response.json().valid).to.true;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/validateToken",
							"host": [
								"{{Url}}"
							],
							"path": [
								"validateToken"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02_User",
			"item": [
				{
					"name": "Cadastro",
					"item": [
						{
							"name": "Funcional - Novo cadastro de login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"userId\", pm.response.json().user._id);\r",
											"\r",
											"pm.test(\"Check is UserID exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"userId\")).to.eql(pm.response.json().user._id);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is FullName exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"FullName\")).to.eql(pm.response.json().user.fullName);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().user.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CPF exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CPF\")).to.eql(pm.response.json().user.cpf);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is validateRegistration exist\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().user.status);\r",
											"})\r",
											"\r",
											"/*pm.test(\"Check is token exist\", function(){\r",
											"    pm.expect(JSON.parse(responseBody).token).to.exist;\r",
											"})*/\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"    let firstName = [\"Joao\", \"Roberto\", \"Cleiton\", \"Mariano\", \"Gustavo\", \"Cesar\", \"Paulo\", \"Cleverson\", \"Deison\", \"Bernardo\"];\r",
											"\r",
											"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName())\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"    let lastName = [\"Silva Filho\", \"Santos de Souza\", \"Sousa da Silva\", \"Alvez Neto\", \"Lima de Mattos\", \"Conceição Filho\", \"de Carvalho\", \"Justos Conceição\", \"Inácio\", \"Schimitt\"];\r",
											"\r",
											"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));\r",
											"\r",
											"// function accessProfile() {\r",
											"\r",
											"//     let accessProfile = [\"ADMIN\", \"GERENCIA\", \"ATENDIMENTO\", \"SUPERVISAO\", \"COORDENADORIA\", \"ADMINISTRATIVO\"];\r",
											"\r",
											"//     let randomItem = accessProfile[Math.floor(Math.random() * accessProfile.length)];\r",
											"\r",
											"//     return randomItem;\r",
											"// }\r",
											"\r",
											"// pm.environment.set(\"AccessProfile\", accessProfile());\r",
											"\r",
											"function randomCpf() {\r",
											"\r",
											"    let randomCpf = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCpf;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", randomCpf());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Mail\", providerMail());\r",
											"\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstName\") + pm.environment.get(\"CPF\") + pm.environment.get(\"Mail\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//pm.variables.replaceIn('{{$timestamp}}')"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Nome vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo nome completo é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo nome completo é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Nome nulo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Aurelioooooo\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Nome com mais de 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O nome completo deve ter no máximo 100 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O nome completo deve ter no máximo 100 caracteres.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Aurelio Santos Aurelio Santos Aurelio Santos Aurelio Santos Aurelio Santos Aurelio Santos Aurelio San\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Nome contendo número",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo nome completo não deve conter números\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo nome completo não deve conter números\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Aurelio1\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Sem nome composto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Aurelioooooo\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Nome e sobrenome sem espaçamento",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"userId\", pm.response.json().user._id);\r",
											"\r",
											"pm.test(\"Check is UserID exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"userId\")).to.eql(pm.response.json().user._id);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is validateRegistration exist\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().user.status);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"    let firstName = [\"Joao\", \"Roberto\", \"Cleiton\", \"Mariano\", \"Gustavo\", \"Cesar\", \"Paulo\", \"Cleverson\", \"Deison\", \"Bernardo\"];\r",
											"\r",
											"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName2\", firstName())\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"    let lastName = [\"Silva Filho\", \"Santos de Souza\", \"Sousa da Silva\", \"Alvez Neto\", \"Lima de Mattos\", \"Conceição Filho\", \"de Carvalho\", \"Justos Conceição\", \"Inácio\", \"Schimitt\"];\r",
											"\r",
											"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName2\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName2\", pm.environment.get(\"FirstName2\") + \" \" + pm.environment.get(\"LastName2\"));\r",
											"\r",
											"function randomCpf() {\r",
											"\r",
											"    let randomCpf = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCpf;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF2\", randomCpf());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Mail2\", providerMail());\r",
											"\r",
											"pm.environment.set(\"Mail2\", pm.environment.get(\"FirstName2\") + pm.environment.get(\"CPF2\") + pm.environment.get(\"Mail2\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"AureliooooooSantos\",\r\n  \"mail\": \"{{Mail2}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF2}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional -  Nome inicial minúscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"aurelio Santos\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Sobrenome inicial minúscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Aurelio santos\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Nome e sobrenome minúsculo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"aurerio santos\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Nome com caractere especial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Aurelio_Santos\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenUser\", pm.response.json().token);\r",
											"\r",
											"pm.environment.set(\"userId\", pm.response.json().user._id);\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is UserID exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"userId\")).to.eql(pm.response.json().user._id);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is token exist\", function(){\r",
											"    pm.expect(pm.response.json().token).to.exist;\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Funcional - Login usuário com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenUser\", pm.response.json().token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Token exist\", function(){\r",
											"    pm.expect(pm.response.json().token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is FullName true\", function(){\r",
											"    pm.expect(pm.environment.get(\"FullName\")).to.eql(pm.response.json().user.fullName);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Mail true\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().user.mail);\r",
											"});\r",
											"\r",
											"// pm.test(\"Check is AccessProfile true\", function(){\r",
											"//     pm.expect(pm.environment.get(\"AccessProfile\")).to.eql(pm.response.json().user.accessProfile);\r",
											"// });\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().user.status);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo e-mail obrigatório",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo e-mail é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo e-mail é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"\",\r\n  \"password\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo senha obrigatório",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo senha é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo senha é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{Mail}}\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo e-mail e senha obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo e-mail é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo e-mail é obrigatório.\");\r",
											"});\r",
											"\r",
											"pm.test(\"O campo senha é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo senha é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - E-mail válido e senha inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"E-mail ou senha informados são inválidos.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"E-mail ou senha informados são inválidos.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"dsadsada\",\r\n  \"password\": \"{{Password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - E-mail inválido e senha válida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"E-mail ou senha informados são inválidos.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"E-mail ou senha informados são inválidos.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"___ ___\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - E-mail e senha inválidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"E-mail ou senha informados são inválidos.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"E-mail ou senha informados são inválidos.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"dsfsdffs\",\r\n  \"password\": \"___ ___\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/login/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Listar",
					"item": [
						{
							"name": "Contar cadastros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"pm.test(`Quantidade de Users cadastrados: ${responseData.count}`, function() {\r",
											"    pm.expect(responseData).to.have.property('count');\r",
											"    pm.expect(responseData.count).to.be.a('number');\r",
											"    pm.expect(responseData.count).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/user/count",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar cadastro por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is UserID exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"userId\")).to.eql(pm.response.json()._id);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is validateRegistration exist\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().status);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/user/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar cadastros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/user/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Editar",
					"item": [
						{
							"name": "Funcional - Alterar nome e e-mail usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Dados atualizados com sucesso!\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Dados atualizados com sucesso!\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check is UserID exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"userId\")).to.eql(pm.response.json().updatedUser._id);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funcional - Alterar status cadastro usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status do usuario atualizado com sucesso para status true.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Status do usuario atualizado com sucesso para status true.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenAdmin}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/status/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"status",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funcional - Alterar senha usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Senha atualizada com sucesso!\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Senha atualizada com sucesso!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{Password2}}\",\r\n  \"confirmPassword\": \"{{Password2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funcional - Alterar e-mail usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Dados atualizados com sucesso!\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Dados atualizados com sucesso!\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check is UserID exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"userId\")).to.eql(pm.response.json().updatedUser._id);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"    let firstName = [\"Joao\", \"Roberto\", \"Cleiton\", \"Mariano\", \"Gustavo\", \"Cesar\", \"Paulo\", \"Cleverson\", \"Deison\", \"Bernardo\"];\r",
											"\r",
											"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName())\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"    let lastName = [\"Silva Filho\", \"Santos de Souza\", \"Sousa da Silva\", \"Alvez Neto\", \"Lima de Mattos\", \"Conceição Filho\", \"de Carvalho\", \"Justos Conceição\", \"Inácio\", \"Schimitt\"];\r",
											"\r",
											"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));\r",
											"\r",
											"function randomCpf() {\r",
											"\r",
											"    let randomCpf = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCpf;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", randomCpf());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Mail\", providerMail());\r",
											"\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstName\") + pm.environment.get(\"CPF\") + pm.environment.get(\"Mail\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"Fulano Ciclano\",\r\n    \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha vazio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: Campo senha é obrigatório\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Campo senha é obrigatório\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Confirmação senha vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo de confirmação de senha não pode ficar vazio.\", \"As senhas não conferem.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo de confirmação de senha não pode ficar vazio.\", \"As senhas não conferem.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha e confirmação de senha vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: Campo senha e confirmação são obrigatórios\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Campo senha é obrigatório\", \"O campo de confirmação de senha é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"confirmPassword\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha com mais de 12 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: A senha não segue os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"A senha deve ter entre 8 e 12 caracteres\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"123456@Test1111\",\r\n  \"confirmPassword\": \"123456@Test1111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha com menos de 8 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: A senha não segue os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\r",
											"        \"A senha deve ter entre 8 e 12 caracteres\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"12@Test\",\r\n  \"confirmPassword\": \"12@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha e confirmação diferentes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: As senhas não coincidem\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"As senhas não conferem.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Test@1234\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha sem caractere especial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: A senha não segue os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"12345Test\",\r\n  \"confirmPassword\": \"12345Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha sem letra maiúscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: A senha não segue os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"test@1234\",\r\n  \"confirmPassword\": \"test@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha sem letra minúscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: A senha não segue os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"TEST@1234\",\r\n  \"confirmPassword\": \"TEST@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Senha sem número",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: A senha não segue os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"TEST@Test\",\r\n  \"confirmPassword\": \"TEST@Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Conflito entre senha nova e antiga",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function(){\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Essa senha já foi utilizada anteriormente\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Essa senha já foi utilizada anteriormente. Por favor, escolha uma nova senha.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{Password2}}\",\r\n  \"confirmPassword\": \"{{Password2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Alterar senha sem token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function(){\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"No token provided.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"No token provided.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Test@1234\",\r\n  \"confirmPassword\": \"Test@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Senha com espaço utilizado como caractere especial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: A senha não segue os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUser}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"432112 Test\",\r\n  \"confirmPassword\": \"432112 Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/user/password/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// pm.sendRequest({\r",
									"//   url: 'https://chips.qacoders.dev.br/api/login',\r",
									"//   method: 'POST',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json'\r",
									"//   },\r",
									"//   body: {\r",
									"//     mode: 'raw',\r",
									"//     raw: JSON.stringify({\r",
									"//       \"mail\": \"sysadmin@qacoders.com\",\r",
									"//       \"password\": \"1234@Test\"\r",
									"//     })\r",
									"//   }\r",
									"// }, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   } else {\r",
									"//     pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"//     }\r",
									"// });"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Excluir",
					"item": [
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Usuário deletado com sucesso!\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Usuário deletado com sucesso!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Url}}/user/{{userId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "03_Company",
			"item": [
				{
					"name": "Cadastro",
					"item": [
						{
							"name": "Criar company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().newCompany.status);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.test(\"Check is CorporateName exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CorporateName\")).to.eql(pm.response.json().newCompany.corporateName);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().newCompany.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CNPJ exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CNPJ\")).to.eql(pm.response.json().newCompany.registerCompany);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - CNPJ com 13 números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CNPJ' da empresa deve ter no máximo 14 caracteres numéricos\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CNPJ' da empresa deve ter no máximo 14 caracteres numéricos\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"4973645319282\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - CNPJ com 15 números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CNPJ' da empresa deve ter no máximo 14 caracteres numéricos\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CNPJ' da empresa deve ter no máximo 14 caracteres numéricos\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"497364531928232\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - CNPJ contendo letras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CNPJ' da empresa deve conter apenas números.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CNPJ' da empresa deve conter apenas números.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"AA4AA36AA319AA\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - CNPJ duplicado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Alert: Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"11111111111111\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - CNPJ vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CNPJ' da empresa é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CNPJ' da empresa é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Nome da empresa vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Nome da empresa' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Nome da empresa' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Nome da empresa excedendo 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Nome da empresa' deve ter no máximo 100 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Nome da empresa' deve ter no máximo 100 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nes\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Nome da empresa permitindo duplicado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().newCompany.status);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.test(\"Check is CorporateName exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany.corporateName).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().newCompany.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CNPJ exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CNPJ\")).to.eql(pm.response.json().newCompany.registerCompany);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"Nestle\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Razão social vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Razão Social' da empresa é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Razão Social' da empresa é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Razão social permitindo duplicado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().newCompany.status);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.test(\"Check is CorporateName exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CorporateName\")).to.eql(pm.response.json().newCompany.corporateName);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().newCompany.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CNPJ exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CNPJ\")).to.eql(pm.response.json().newCompany.registerCompany);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"Nestle\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Razão social excedendo 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Razão Social' da empresa deve ter no máximo 100 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Razão Social' da empresa deve ter no máximo 100 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}s\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nes\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Contato Responsável vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Contado do Responsável' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Contado do Responsável' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Contato Responsável excedendo 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Contado do Responsável' deve ter no máximo 100 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Contado do Responsável' deve ter no máximo 100 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nestle Nes\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Contato Responsável permitindo números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().newCompany.status);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.test(\"Check is CorporateName exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CorporateName\")).to.eql(pm.response.json().newCompany.corporateName);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().newCompany.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CNPJ exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CNPJ\")).to.eql(pm.response.json().newCompany.registerCompany);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"Nestle123\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Contato Responsável permitindo cadastro sem dois nomes compostos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().newCompany.status);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.test(\"Check is CorporateName exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CorporateName\")).to.eql(pm.response.json().newCompany.corporateName);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().newCompany.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CNPJ exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CNPJ\")).to.eql(pm.response.json().newCompany.registerCompany);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"12345678\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Telefone vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Telefone' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Telefone' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Telefone excedendo 20 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Telefone' deve ter entre 13 e 14 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Telefone' deve ter entre 13 e 14 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"123456789123456789123\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Email vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Email' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Email' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Descrição vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'Descrição' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'Descrição' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Logradouro vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'logradouro' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'logradouro' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Logradouro excedendo 80 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'logradouro' deve possuir no máximo 80 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'logradouro' deve possuir no máximo 80 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"Nestle123 Nestle123 Nestle123 Nestle123 Nestle123 Nestle123 Nestle123 Nestle123 N\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Número vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'número' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'número' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Número excedendo 10 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'número' deve possuir no máximo 10 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'número' deve possuir no máximo 10 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"12345678912\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Número permitindo cadastro com letras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().newCompany.status);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.test(\"Check is CorporateName exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CorporateName\")).to.eql(pm.response.json().newCompany.corporateName);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().newCompany.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CNPJ exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CNPJ\")).to.eql(pm.response.json().newCompany.registerCompany);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"ABCDEFGHIJ\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Complemento excedendo 80 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'complemento' deve possuir no máximo 80 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'complemento' deve possuir no máximo 80 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar, de 4503 ao fim - lado ímpar, de 4503 ao fim - lado í\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Bairro vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'bairro' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Bairro excedendo 50 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'bairro' deve possuir no máximo 50 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Morumbi Morumbi Morumbi Morumbi Morumbi Morumbi Mor\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Cidade vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'cidade' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Cidade excedendo 50 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'cidade' deve possuir no máximo 50 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"São Paulo São Paulo São Paulo São Paulo São Paulo S\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Cidade contendo caracteres numéricos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}s\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"São Paulo 12345 São Paulo 12345 São Paulo 12345 S\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Estado vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'estado' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - Estado contendo caracteres numéricos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'estado' só pode conter letras maiúsculas\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"11\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - País vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo País é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo País é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - País excedendo 50 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo País permite até 50 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo País permite até 50 caracteres.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"Brasillllllllllllllllllllllllllllllllllllllllllllll\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] País permitindo caracteres numéricos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().newCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().newCompany.status);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"companyId\", pm.response.json().newCompany._id);\r",
											"\r",
											"pm.test(\"Check is CorporateName exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CorporateName\")).to.eql(pm.response.json().newCompany.corporateName);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is Mail exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().newCompany.mail);\r",
											"})\r",
											"\r",
											"pm.test(\"Check is CNPJ exist\", function(){\r",
											"    pm.expect(pm.environment.get(\"CNPJ\")).to.eql(pm.response.json().newCompany.registerCompany);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"Brasil123456789\",\r\n            \"zipCode\": \"{{CEP}}\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - CEP vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CEP' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Não Funcional - CEP contendo letras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CEP' só pode conter números\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' só pode conter números\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstCorporateName() {\r",
											"\r",
											"    let firstCorporateName = [\"Nestle\", \"Lacta\", \"Garoto\", \"Balduco\", \"Neugebauer\", \"CacauShow\", \"Arcor\", \"Hersheys\", \"Kopenhagen\", \"Milka\"];\r",
											"\r",
											"    let randomItem = firstCorporateName[Math.floor(Math.random() * firstCorporateName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"FirstCorporateName\", firstCorporateName())\r",
											"\r",
											"\r",
											"function randomNumberCorporate() {\r",
											"\r",
											"    let randomNumberCorporate = '';\r",
											"    \r",
											"    // Gerar 11 dígitos aleatórios\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        randomNumberCorporate += Math.floor(Math.random() * 5).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumberCorporate;\r",
											"}\r",
											"pm.environment.set(\"RandomNumberCorporate\", randomNumberCorporate());\r",
											"\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.environment.get(\"FirstCorporateName\") + \" \" + pm.environment.get(\"RandomNumberCorporate\"));\r",
											"\r",
											"\r",
											"pm.environment.set(\"RazaoSocial\", pm.environment.get(\"CorporateName\") + \" \" + \"TesteCase\" + \" Ltda\");\r",
											"\r",
											"\r",
											"function randomCNPJ() {\r",
											"\r",
											"    let randomCNPJ = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomCNPJ += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomCNPJ;\r",
											"}\r",
											"pm.environment.set(\"CNPJ\", randomCNPJ());\r",
											"\r",
											"\r",
											"function randomTelefone() {\r",
											"\r",
											"    let randomTelefone = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 14; i++) {\r",
											"        randomTelefone += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomTelefone;\r",
											"}\r",
											"pm.environment.set(\"Telefone\", randomTelefone());\r",
											"\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"    let providerMail = [\"@hotmail.com\", \"@gmail.com\", \"@outlook.com\", \"@yahoo.com.br\", \"@uol.com.br\"];\r",
											"\r",
											"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"pm.environment.set(\"providerMail\", providerMail());\r",
											"pm.environment.set(\"Mail\", pm.environment.get(\"FirstCorporateName\") + pm.environment.get(\"CNPJ\") + pm.environment.get(\"providerMail\"));\r",
											"\r",
											"\r",
											"function randomZipcode() {\r",
											"\r",
											"    let randomZipcode = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        randomZipcode += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomZipcode;\r",
											"}\r",
											"pm.environment.set(\"CEP\", randomZipcode());\r",
											"\r",
											"function randomNumber() {\r",
											"\r",
											"    let randomNumber = '';\r",
											"    \r",
											"    // Gerar 14 dígitos aleatórios\r",
											"    for (let i = 0; i < 4; i++) {\r",
											"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
											"    }\r",
											"\r",
											"    return randomNumber;\r",
											"}\r",
											"pm.environment.set(\"Numero\", randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"corporateName\": \"{{CorporateName}}\",\r\n\"registerCompany\": \"{{CNPJ}}\",\r\n\"matriz\": \"{{RazaoSocial}}\",\r\n\"responsibleContact\": \"{{FirstCorporateName}}\",\r\n\"telephone\": \"{{Telefone}}\",\r\n\"mail\": \"{{Mail}}\",\r\n\"serviceDescription\": \"Desenvolvemos soluções inovadoras para impulsionar o futuro da tecnologia.\",\r\n\"address\": [\r\n        {\r\n            \"street\": \"{{$randomStreetAddress}}\",\r\n            \"number\": \"{{Numero}}\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"{{$randomWord}}\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"state\": \"{{$randomCountryCode}}\",\r\n            \"country\": \"{{$randomCountry}}\",\r\n            \"zipCode\": \"ABCDEFGH\"\r\n        }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Listar",
					"item": [
						{
							"name": "Listar companys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if at least one ID exists\", function() {\r",
											"    const jsonData = pm.response.json();\r",
											"    const hasId = jsonData.some(item => item._id);\r",
											"    pm.expect(hasId).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/company/",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Consultar company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json()._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().status);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/company/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contar companys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"pm.test(`Quantidade de Company cadastradas: ${responseData.count}`, function() {\r",
											"    pm.expect(responseData).to.have.property('count');\r",
											"    pm.expect(responseData.count).to.be.a('number');\r",
											"    pm.expect(responseData.count).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/company/count",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"count"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Editar",
					"item": [
						{
							"name": "Funcional - Editar dados endereço empresa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().updateCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().updateCompany.status);\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Check is FullName exist\", function(){\r",
											"//     pm.expect(pm.environment.get(\"FullName\")).to.eql(pm.response.json().user.fullName);\r",
											"// })\r",
											"\r",
											"// pm.test(\"Check is Mail exist\", function(){\r",
											"//     pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().user.mail);\r",
											"// })\r",
											"\r",
											"// pm.test(\"Check is CPF exist\", function(){\r",
											"//     pm.expect(pm.environment.get(\"CPF\")).to.eql(pm.response.json().user.cpf);\r",
											"// })\r",
											"\r",
											"// pm.test(\"Check is validateRegistration exist\", function(){\r",
											"//     pm.expect(true).to.eql(pm.response.json().status);\r",
											"// })\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo logradouro vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'logradouro' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'logradouro' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo logradouro com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'logradouro' não atende os requisitos necessários\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'logradouro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"123fds45@#$90 dsfs12*&#$8901 123fds45@#$90 dsfs12*&#$8901 123fds45@#$90 dsfs12*&\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/66aac52d282357acafef0d9a",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"66aac52d282357acafef0d9a"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Campo logradouro permitindo mais de 50 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().updateCompany.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Endereço da companhia atualizado com sucesso.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().updateCompany._id).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"123fds4567890 dsfs123478901 2fdsf345678901fsd f2345678901 fsdf234567 8901fsdf234\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo número vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'número' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'número' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo número excedendo 10 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'número' deve possuir no máximo 10 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'número' deve possuir no máximo 10 caracteres.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"12345678910\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Campo número permitindo letras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().updateCompany.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Endereço da companhia atualizado com sucesso.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().updateCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check if 'number' field exists in address\", function() {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Verifica se 'updateCompany' e 'address' existem\r",
											"    pm.expect(jsonData).to.have.property('updateCompany');\r",
											"    pm.expect(jsonData.updateCompany).to.have.property('address').that.is.an('array').that.is.not.empty;\r",
											"\r",
											"    // Verifica se o primeiro objeto no array 'address' contém o campo 'number'\r",
											"    pm.expect(jsonData.updateCompany.address[0]).to.have.property('number');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"TESTTEST\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo complemento excedendo 80 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'complemento' deve possuir no máximo 80 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'complemento' deve possuir no máximo 80 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar de 4503 ao fim - lado ímpar de 4503 ao fim - ladossss\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo complemento com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'complemento' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'complemento' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"@#$%&* @#$%&* @#$%&*\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo bairro vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'bairro' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo bairro excedendo 50 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'bairro' deve possuir no máximo 50 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"123fds4567890dsfs1234789012fd123fds4567890dsfs12347\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo bairro com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'bairro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"@#$%&* @#$%&* @#$%&*\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo cidade vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'cidade' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo cidade com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo@#$%&%&*\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo cidade com números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo 123\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo cidade excedendo 50 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo@$#*!-123 São Paulo@$#*!-123 São Paulo@&*!\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo estado vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'estado' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo estado com números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'estado' só pode conter letras maiúsculas\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"22\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo estado com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'estado' só pode conter letras maiúsculas\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"--\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo estado excedendo 2 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'estado' deve possuir 2 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' deve possuir 2 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SPPPP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo estado com letras minúsculas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'estado' só pode conter letras maiúsculas\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"sp\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo país vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo País é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo País é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo país excedendo 50 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo País permite até 50 caracteres.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo País permite até 50 caracteres.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Braaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasilllllll\",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BUG] Campo país permitindo números e caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Status true\", function(){\r",
											"    pm.expect(true).to.eql(pm.response.json().updateCompany.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Endereço da companhia atualizado com sucesso.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check is ID exist\", function(){\r",
											"    pm.expect(pm.response.json().updateCompany._id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Check if 'country' field exists in address\", function() {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Verifica se 'updateCompany' e 'address' existem\r",
											"    pm.expect(jsonData).to.have.property('updateCompany');\r",
											"    pm.expect(jsonData.updateCompany).to.have.property('address').that.is.an('array').that.is.not.empty;\r",
											"\r",
											"    // Verifica se o primeiro objeto no array 'address' contém o campo 'country'\r",
											"    pm.expect(jsonData.updateCompany.address[0]).to.have.property('country');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Br@sil$#*!-123ªº_-&? \",\r\n            \"zipCode\": \"04777001\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo CEP vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CEP' é obrigatório.\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' é obrigatório.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo CEP excedendo 8 números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CEP' deve conter 8 dígitos\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' deve conter 8 dígitos\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"123456789\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo CEP com letras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CEP' só pode conter números\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' só pode conter números\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"SPSPSPSP\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Não funcional - Campo CEP com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error: O campo 'CEP' só pode conter números\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' só pode conter números\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"address\": [\r\n        {\r\n            \"street\": \"Rua Um Dois Três\",\r\n            \"number\": \"51\",\r\n            \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n            \"district\": \"Rua das Flores\",\r\n            \"city\": \"São Paulo\",\r\n            \"state\": \"SP\",\r\n            \"country\": \"Brasil\",\r\n            \"zipCode\": \"--------\"\r\n        }\r\n]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/address/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"address",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Excluir",
					"item": [
						{
							"name": "Excluir cadastro company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check is Delete sucess\", function(){\r",
											"    pm.expect(\"Companhia deletado com sucesso.\").to.eql(pm.response.json().msg);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Check is FullName exist\", function(){\r",
											"//     pm.expect(pm.environment.get(\"FullName\")).to.eql(pm.response.json().user.fullName);\r",
											"// })\r",
											"\r",
											"// pm.test(\"Check is Mail exist\", function(){\r",
											"//     pm.expect(pm.environment.get(\"Mail\")).to.eql(pm.response.json().user.mail);\r",
											"// })\r",
											"\r",
											"// pm.test(\"Check is CPF exist\", function(){\r",
											"//     pm.expect(pm.environment.get(\"CPF\")).to.eql(pm.response.json().user.cpf);\r",
											"// })\r",
											"\r",
											"// pm.test(\"Check is validateRegistration exist\", function(){\r",
											"//     pm.expect(true).to.eql(pm.response.json().status);\r",
											"// })"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/company/{{companyId}}",
									"host": [
										"{{Url}}"
									],
									"path": [
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"  url: 'https://chips.qacoders.dev.br/api/login',\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json'\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"      \"mail\": \"sysadmin@qacoders.com\",\r",
									"      \"password\": \"1234@Test\"\r",
									"    })\r",
									"  }\r",
									"}, (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  } else {\r",
									"    pm.environment.set(\"tokenAdmin\", response.json().token);\r",
									"    }\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{tokenAdmin}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}